[
  {
    "objectID": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html",
    "title": "MC1_In-class_Ex05",
    "section": "",
    "text": "Loading the R packages required.\n\n\nCode\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n\n\nIn the code below, ‘fromJSON’ of jsonlite package is used to import MC1_graph.json file ino R.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\n\nCode\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nData cleaning by splitting the nodes and links.\n\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#getting-started",
    "href": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#getting-started",
    "title": "MC1_In-class_Ex05",
    "section": "",
    "text": "Loading the R packages required.\n\n\nCode\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n\n\nIn the code below, ‘fromJSON’ of jsonlite package is used to import MC1_graph.json file ino R.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\n\nCode\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nData cleaning by splitting the nodes and links.\n\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#initial-eda",
    "href": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#initial-eda",
    "title": "MC1_In-class_Ex05",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\n\n\n\n\nNote\n\n\n\n\nfield names uses `` instead of ’’.\n\n\n\n\n\nCode\nggplot(data = edges_tb1,\n       aes(y = `Edge Type`)) + geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#creating-knowledge-graph",
    "title": "MC1_In-class_Ex05",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\n\nStep 1: Mapping from node id to row index\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)\n                 ))\n\n\nThis ensures each id rom your node list is mapped to the correct row number.\n\n\nStep 2: map source and target IDs to row indices\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\nStep 3: Filter out any unmatched\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\nLastly, ‘tbl_graph’ is used to create idygraph’s graph object by using the code chuk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tb1,\n                   directed = kg$directed)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/MC1_In-class_Ex05.html#visualising-the-knowledge-graph",
    "title": "MC1_In-class_Ex05",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n\n\n\nVisualising the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") + \n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\nVisualising the sub-graph\nIn this section, we are interested to create a sub-graph base on “Memberof” value in Edge Type column of he edges data frame.\n\nStep 1: Filter edges to only “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional cleanup\n\n\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()"
  }
]