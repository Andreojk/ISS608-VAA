---
title: "Hands-on_Ex06"
author: "Andre Ong Jia Kang"
date: "May 17, 2025"
date-modified: "last-modified"
format:
  html:
    code-fold: true
    code-summary: "Code"
---

# 17 Visualising and Analysing Time-oriented Data

## 17.1 Learning Outcome

By the end of this hands-on exercise, I will be creating the followings data visualisation by using R packages:

-   plotting a calender heatmap by using ggplot2 functions,

-   plotting a cycle plot by using ggplot2 function,

-   plotting a slopegraph

-   plotting a horizon chart

## 17.3 Getting Started

Installing and launching the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.

Packages:

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes,
               gridExtra, readxl, knitr, data.table,
               CGPfunctions, ggHoriPlot, tidyverse)
```

## 17.4 Plotting Calendar Heatmap

In this section, I will be practicing to plot a calender heatmap programmatically by using ggplot2 package.

![](images/1.png){fig-align="center"}

By the end of this section, I will:

-   plot a calender heatmap by using ggplot2 functions and extension,
-   to write function using R programming,
-   to derive specific date and time related field by using base R and lubridate packages
-   to perform data preparation task by using tidyr and dplyr packages.

### 17.4.1 The Data

For the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.

### 17.4.2 Importing the data

First, I will use the code chunk below to import eventlog.csv file into R environment and called the data frame as "attacks".

```{r}
#| code-fold: false
#| code-summary: "Code"

attacks <- read_csv("data/eventlog.csv")
```

### 17.4.3 Examining the data structure

It is always a good practice to examine the imported data frame before further analysis is performed.

For example, kable() can be used to review the structure of the imported data frame.

```{r}
#| code-fold: false
#| code-summary: "Code"

kable(head(attacks))
```

There are three columns, namely timestamp, source_country and tz.

-   timestamp field stores date-time values in POSIXct format.
-   source_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.
-   tz field stores time zone of the source IP address.

### 17.4.4 Data Preparation

Step 1: Deriving *weekday* and *hour of day* fields

Before we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task.

```{r}

make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

::: {.callout-note title="Note"}
-   [ymd_hms()](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [hour()](https://lubridate.tidyverse.org/reference/hour.html) are from [lubridate](https://lubridate.tidyverse.org/) package, and
-   [weekdays()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a base R function.
:::

Step 2: Deriving the attacks tibble data frame

```{r}

wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

::: {.callout-note title="Note"}
Beside extracting the necessary data into attacks data frame, [mutate()]{style="color:purple;"} of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting
:::

Table below shows the tidy tibble table after processing.

```{r}
#| code-fold: false
#| code-summary: "Code"

kable(head(attacks))
```

### 17.4.5 Building the Calendar Heatmaps

::: panel-tabset
#### Plot

```{r, fig.width=10, fig.height=10}
#| echo: false

grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

#### Code

```{r, fig.width=10, fig.height=10}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```
:::

::: {.callout-tip title="Things to learn from the code chunk"}
-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.
-   new field called n is derived by using [group_by()]{style="color:purple;"} and [count()]{style="color:purple;"} functions.
-   [na.omit()]{style="color:purple;"} is used to exclude missing value.
-   [geom_tile()]{style="color:purple;"} is used to plot tiles (grids) at each x and y position. [color]{style="color:purple;"} and [size]{style="color:purple;"} arguments are used to specify the border color and line size of the tiles.
-   [theme_tufte()](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [ggthemes](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.
-   [coord_equal()]{style="color:purple;"} is used to ensure the plot will have an aspect ratio of 1:1.
-   [scale_fill_gradient()]{style="color:purple;"} function is used to creates a two colour gradient (low-high).
:::

Then we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.

### 17.4.6 Building Multiple Calendar Heatmaps

**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.

![](images/2.png){fig-align="center"}

### 17.4.7 Plotting Multiple Calendar Heatmaps

Step 1: Deriving attack by country object

In order to identify the top 4 countries with the highest number of attacks, I required to do the followings:

-   count the number of attacks by country,
-   calculate the percent of attackes by country, and
-   save the results in a tibble data frame.

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

Step 2: Preparing the tidy data frame

In this step, I will extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()
```

### 17.4.8 Plotting Multiple Calendar Heatmaps

Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.

::: panel-tabset
#### Plot

```{r, fig.width=10, fig.height=10}
#| echo: false

ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

#### Code

```{r, fig.width=10, fig.height=10}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```
:::

## 17.5 Plotting Cycle Plot

In this section, I will attempt to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

![](images/3.png){fig-align="center"}

### 17.5.1 Step 1: Data Import

For the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.

The code chunk below imports arrivals_by_air.xlsx by using [read_excel()]{style="color:purple;"} of **readxl** package and save it as a tibble data frame called air.

```{r}
#| code-fold: false
#| code-summary: "Code"

air <- read_excel("data/arrivals_by_air.xlsx")
```

### 17.5.2 Step 2: Deriving month and year fields

Next, two new fields called month and year are derived from *Month-Year* field.

```{r}
#| code-fold: false
#| code-summary: "Code"

air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

### 17.5.3 Step 4: Extracting the target country

```{r}
#| code-fold: false
#| code-summary: "Code"

Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

### 17.5.4 Step 5: Computing year average arrivals by month

The code chunk below uses [group_by()]{style="color:purple;"} and [summarise()]{style="color:purple;"} of **dplyr** to compute year average arrivals by month.

```{r}
#| code-fold: false
#| code-summary: "Code"

hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### 17.5.5 Srep 6: Plotting the cycle plot

The code chunk below is used to plot the cycle plot as shown in Slide 12/23.

```{r}
#| code-fold: false
#| code-summary: "Code"

ggplot() + 
  geom_line(data = Vietnam,
            aes(x = year, 
                y = `Vietnam`, 
                group = month), 
            colour = "black") +
  geom_hline(data = hline.data, 
             aes(yintercept = avgvalue), 
             linetype = "dashed", 
             colour = "red", 
             size = 0.5) + 
  facet_grid(~month) +
  labs(title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019",
       x = "", 
       y = "No. of Visitors") +   
  theme_minimal(base_family = "Helvetica") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
```

## 17.6 Plotting Slopegraph

In this section I will plot a slopegraph by using R.

Before getting start, ensure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about [newggslopegraph()]{style="color:purple;"} and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

### 17.6.1 Step 1: Data Import

Import the rice data set into R environment by using the code chunk below.

```{r}
#| code-fold: false
#| code-summary: "Code"

rice <- read_csv("data/rice.csv")
```

### 17.6.2 Step 2: Plotting the slopegraph

Next, code chunk below will be used to plot a basic slopegraph as shown below.

::: panel-tabset
#### Plot

```{r, fig.width=10, fig.height=10}
#| echo: false

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Andre Ong Jia Kang")
```

#### Code

```{r, fig.width=10, fig.height=10}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Andre Ong Jia Kang")
```
:::

::: {.callout-note title="Note"}
For effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.
:::

## **Extra Plots using Rice Dataset**

I will be exploring the below additional plots for the Rice dataset.

- **Heatmaps, Cycleplots, Barcharts, Boxplots, Linegraphs.**

Main purpose will be to visualize the **1) Rice production** & **2) Yield** over the years or countries.

::: {.callout-tip title="Simple and Easy"}
For effective data visualization, simple graphs can tell a story instead of complicated ones.
:::

### Loading Packages

```{r}
pacman::p_load(ggplot2, readr, dplyr, scales) 
```

### Rice Production (Extra Plots 1 - 4)

#### Plot 1 Rice Production Heat Map

- Let's plot out a heatmap to show the Rice Production values across the countries.

::: panel-tabset

##### Plot

```{r}
#| echo: false

ggplot(rice, aes(x = Year, y = Country, fill = Production)) +
  geom_tile(color = "white") +
  scale_fill_viridis(option = "C", labels = comma) +
  labs(
    title = "Heatmap of Rice Production",
    x = "Year",
    y = ""
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 7),
    panel.grid = element_blank()
  )
```

##### Code

```{r}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

ggplot(rice, aes(x = Year, y = Country, fill = Production)) +
  geom_tile(color = "white") +
  scale_fill_viridis(option = "C", labels = comma) +
  labs(
    title = "Heatmap of Rice Production",
    x = "Year",
    y = ""
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 7),
    panel.grid = element_blank()
  )
```

:::

::: {.callout-note title="Plot 1 Note"}
Based on the colour, this shows that China has the highest amount of rice production
:::


#### Plot 2 Rice Production Over Time

- If china has the highest rice production, let's see how much China actually produces yearly against the other countries.

::: panel-tabset

##### Plot

```{r, fig.width=10, fig.height=10}
#| echo: false

ggplot(rice, aes(x = Year, y = Production, color = Country, group = Country)) +
  geom_line(size = 1.2) +
  labs(
    title = "Rice Production Over Time",
    x = "Year",
    y = "Production (tonnes)"
  ) +
  scale_x_continuous(breaks = pretty_breaks()) +
  scale_y_continuous(labels = comma) +
  theme_minimal()
```

##### Code

```{r}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

ggplot(rice, aes(x = Year, y = Production, color = Country, group = Country)) +
  geom_line(size = 1) +
  labs(
    title = "Rice Production Over Time",
    x = "Year",
    y = "Production (tonnes)"
  ) +
  scale_x_continuous(breaks = pretty_breaks()) +
  theme_minimal()
```

:::

::: {.callout-note title="Plot 2 Note"}
The bottom few countries in the plot are hard to deduce the order. Let's try to use bargraph to understand it further.
:::

#### Plot 3 Rice Production using Bar graphs 

- Using bargraphs with the axis, we can visualise clearly on the order of countries for total rice production and their respective values.

::: panel-tabset

##### Plot 

```{r}
#| echo: false

rice %>%
  group_by(Country) %>%
  summarize(TotalProd = sum(Production, na.rm = TRUE)) %>%
  arrange(desc(TotalProd)) %>%
  ggplot(aes(x = reorder(Country, TotalProd), y = TotalProd, fill = Country)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    title = "Total Rice Production by Country",
    x = "",
    y = "Total Production (tonnes)"
  ) +
  scale_y_continuous(labels = comma) +
  theme_minimal()
```

##### Code 

```{r}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

rice %>%
  group_by(Country) %>%
  summarize(TotalProd = sum(Production, na.rm = TRUE)) %>%
  arrange(desc(TotalProd)) %>%
  ggplot(aes(x = reorder(Country, TotalProd), y = TotalProd, fill = Country)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    title = "Total Rice Production by Country",
    x = "",
    y = "Total Production (tonnes)"
  ) +
  scale_y_continuous(labels = comma) +
  theme_minimal()
```

:::

::: {.callout-note title="Plot 3 Note"}
The bar graph clearly shows the distinct difference and order between the countries and the amount of rice produced.
:::

#### Plot 4 Overall Rice production across the Years using Line graphs

- Curiously, I want to find out has rice production output always increased every decade.

::: panel-tabset

##### Plot

```{r, fig.height=4}
#| echo: false

# 2. Cycle plot: group years into decades and show within-decade patterns


rice_cycle <- rice %>%
  mutate(
    Decade = paste0(floor((Year - 1) / 10) * 10, "s"),
    YearInDecade = Year - as.numeric(substr(Decade, 1, 4))
  ) %>%
  group_by(Decade, Year, YearInDecade) %>%
  summarize(TotalProd = sum(Production, na.rm = TRUE), .groups = "drop")


ggplot(rice_cycle, aes(
  x = Year - as.numeric(substr(Decade, 1, 4)),
  y = TotalProd,
  color = Decade,
  group = Decade
)) +
  geom_line(size = 1.2) +
  labs(
    title = "Cycle Plot: Rice Production by Decade",
    x = "Year within Decade",
    y = "Total Production (tonnes)"
  ) +
  scale_x_continuous(breaks = 0:10) +
  scale_y_continuous(labels = comma) +
  theme_minimal() +
  theme(legend.title = element_blank())
```

##### Code

```{r, fig.height=4}

#| code-fold: false
#| code-summary: "Code"
#| eval: false

# 2. Cycle plot: group years into decades and show within-decade patterns


rice_cycle <- rice %>%
  mutate(
    Decade = paste0(floor((Year - 1) / 10) * 10, "s"),
    YearInDecade = Year - as.numeric(substr(Decade, 1, 4))
  ) %>%
  group_by(Decade, Year, YearInDecade) %>%
  summarize(TotalProd = sum(Production, na.rm = TRUE), .groups = "drop")


ggplot(rice_cycle, aes(
  x = Year - as.numeric(substr(Decade, 1, 4)),
  y = TotalProd,
  color = Decade,
  group = Decade
)) +
  geom_line(size = 1.2) +
  labs(
    title = "Cycle Plot: Rice Production by Decade",
    x = "Year within Decade",
    y = "Total Production (tonnes)"
  ) +
  scale_x_continuous(breaks = 0:10) +
  scale_y_continuous(labels = comma) +
  theme_minimal() +
  theme(legend.title = element_blank())
```

:::

::: {.callout-note title="Plot 4 Note"}
This trend shows that countries have produced more than 2.5x the total production of rice from 1960s to 2000s.
:::

### Rice Yield (Extra Plots 5 - 6)

#### Plot 5 Rice Yield By Country using line graph

- Let's try to visualize the yield of rice production of each country.

::: panel-tabset

##### Plot

```{r, fig.height= 8}
#| echo: false

ggplot(rice, aes(x = Year, y = Yield, color = Country, group = Country)) +
  geom_line(linewidth = 1.2) +
  scale_y_continuous(labels = label_comma()) +
  labs(
    title = "Rice Yield by Country (1961–1980)",
    subtitle = "Year: 1960 to 1980",
    x = "Year", y = "Yield (tonnes per hectare)",
    caption = "Animated line plot using gganimate"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

```

##### Code

```{r, fig.height= 8}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

ggplot(rice, aes(x = Year, y = Yield, color = Country, group = Country)) +
  geom_line(linewidth = 1.2) +
  scale_y_continuous(labels = label_comma()) +
  labs(
    title = "Rice Yield by Country (1961–1980)",
    subtitle = "Year: 1960 to 1980",
    x = "Year", y = "Yield (tonnes per hectare)",
    caption = "Animated line plot using gganimate"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

```

:::

::: {.callout-note title="Plot 5 Note"}
It's abit hard to visualise with line graph, a boxplot might be more suitable for this instead.
:::

#### Plot 6 Rice Yield By Country using Boxplot

::: panel-tabset

##### Plot

```{r}
#| echo: false

ggplot(rice, aes(x = Country, y = Yield, fill = Country)) +
  geom_boxplot(outlier.alpha = 0.4) +
  coord_flip() +
  labs(
    title = "Distribution of Rice Yield by Country",
    x = "",
    y = "Yield (tonnes/ha)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

##### Code

```{r}
#| code-fold: false
#| code-summary: "Code"
#| eval: false

ggplot(rice, aes(x = Country, y = Yield, fill = Country)) +
  geom_boxplot(outlier.alpha = 0.4) +
  coord_flip() +
  labs(
    title = "Distribution of Rice Yield by Country",
    x = "",
    y = "Yield (tonnes/ha)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```


:::

::: {.callout-note title="Plot 6 Note"}
The boxplot accurately shows the spread of yield of each country. Based on the plot, u can find that Korea, Japan & China are the top 3 countries for Yield.
:::
