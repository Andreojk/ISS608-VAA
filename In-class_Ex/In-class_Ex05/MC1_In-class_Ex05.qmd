---
title: "MC1_In-class_Ex05"
author: "Andre Ong Jia Kang"
date: "May 17, 2025"
date-modified: "last-modified"
format:
  html:
    code-fold: true
    code-summary: "Code"
---

## Getting Started

Loading the R packages required.

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```

In the code below, 'fromJSON' of **jsonlite** package is used to import *MC1_graph.json* file ino R.

```{r}
kg <- fromJSON("data/MC1_graph.json")
```

### Inspecting sturcture

```{r}
str(kg, max.level = 1)
```

### Extract and Inspect

-   Data cleaning by splitting the nodes and links.

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tb1 <- as_tibble(kg$links)
```

## Initial EDA

::: {.callout-note title="Note"}
-   field names uses \`\` instead of ''.
:::

```{r}
ggplot(data = edges_tb1,
       aes(y = `Edge Type`)) + geom_bar()
```

## Creating Knowledge Graph

### Step 1: Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)
                 ))
```

This ensures each id rom your node list is mapped to the correct row number.

### Step 2: map source and target IDs to row indices

```{r}
edges_tb1 <- edges_tb1 %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### Step 3: Filter out any unmatched

```{r}
edges_tb1 <- edges_tb1 %>%
  filter(!is.na(from), !is.na(to))
```

### Step 4: Creating the graph

Lastly, 'tbl_graph' is used to create idygraph's graph object by using the code chuk below.

```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tb1,
                   directed = kg$directed)
```

## Visualising the knowledge graph

```{r}
set.seed(1234)
```

### Visualising the whole graph

```{r}
#| eval: false

ggraph(graph, layout = "fr") + 
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

### Visualising the sub-graph

In this section, we are interested to create a sub-graph base on "Memberof" value in *Edge Type* column of he *edges* data frame.

#### Step 1: Filter edges to only "Memberof"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

#### Step 2: Extract only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

#### Step 3: Keep only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id) # optional cleanup
```

#### Plot the sub-graph

```{r}
ggraph(graph_memberof,
       layout = "fr") +
  geom_edge_link(alpha = 0.5,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 1) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```
